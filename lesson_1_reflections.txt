How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Only the changes are visible so it's easier to see what could have caused
	the changed behaviour.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It's always possible to go back to an older, working version.
	It's easy to see what has been changed and all the changes can be undone
	or redone.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual saving allows to have only meaningful version, while automatic saving
	makes sure that nothing gets lost by forgetting to save.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Version control systems that are made to work with code are more likely to
	allow versioning of multiple files at once, because there usually are a lot
	of dependencies. Working with files without interdependecy doesn't require
	saving the complete project state, so it's more resource efficient to just 
	save single files.

How can you use the commands git log and git diff to view the history of files?

    git log shows all the commits with their comments and ids, and the ids can
	be used to compare commits with git diff

How might using version control make you more confident to make changes that
could break something?

    With version control it's always possible to revert to existing versions
	from before the introduction of the bug, so it's no big deal if you break
	something

Now that you have your workspace set up, what do you want to try using Git for?

    Playing around with the asteroids game
