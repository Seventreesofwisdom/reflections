When would you want to use a remote repository rather than keeping all your
work local?

  A remote repository can be useful as a backup of my work. It also helps working on
  a project from more than one device or collaborating on a project with other people.
  I can also use it to publish my work for others to use and improve on it.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    To avoid overwriting any local changes.

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

    A fork is an online copy of an existing (remote) github repository that can be changed without any
    impact on the original repository. A clone is a (local) copy of a github repository on a computer
    which can be used to make changes to the repository. The changes will only exist locally
    before pushing them to the remote repository. A branch is one version of a repository that
    can be changed independently from other branches of the same repository. A branch would be used
    to do experimental development that may result in an update of the main (master) branch. Bringing
    two branches together is called merging.
    
What is the benefit of having a copy of the last known state of the remote stored locally?

    Having a local copy of the last known state allows to compare local changes to changes in the remote
    without internet access and without having to merge immediately. It's possible to continue working
    on local changes offline until they are ready to be merged and also the merge can be done offline.
    There is a risk though, because an offline merge will not take into account if any newer commits have
    been added to the remote. So this should be checked before pushing the result of an offline merge.
    
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    In a collaboration without any kind of version control it is a lot more difficult or even impossible
    to understand who changed what and when. It would be necessary to agree on file naming conventions or
    similar things to avoid losing track of changes.
    
When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

    Making changes directly in the master branch is easier because there is no extra effort for merging.
    If only few people work on a repository and they make only small, stable, quick changes, working on master
    can be an option. It is also possible to work locally without pushing to Github for some time, so "quick" is
    not strictly necessary. However, there's no backup of the local changes this way and merging back to master
    is more complicated when new changes have been made on the remote.
    All in all, in most situations where more than 2 or 3 people are collaborating, a lot of experimental versions
    of a project exist or changes take some time do be done, it makes sense to create separate branches.
    It also makes it easier to see in the history of the repository how the development of separate features
    was done.